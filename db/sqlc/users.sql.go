// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    username,
    password,
    full_name,
    email
) VALUES (
    ?,?,?,?
)
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.Email,
	)
}

const getUser = `-- name: GetUser :one
SELECT username, password, email, full_name, password_change_at, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.Email,
		&i.FullName,
		&i.PasswordChangeAt,
		&i.CreatedAt,
	)
	return i, err
}

const userExist = `-- name: UserExist :one
select exists(select username, password, email, full_name, password_change_at, created_at from users where username = ?) as isExist
`

func (q *Queries) UserExist(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExist, username)
	var isexist bool
	err := row.Scan(&isexist)
	return isexist, err
}

const userMoreThanOne = `-- name: UserMoreThanOne :one
select count(*) from users where username = ?
`

func (q *Queries) UserMoreThanOne(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userMoreThanOne, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}
