// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: entry.sql

package db

import (
	"context"
	"database/sql"
)

const createEntries = `-- name: CreateEntries :execresult
INSERT INTO entries(
    account_id,
    amount
) values (
    ?,?
)
`

type CreateEntriesParams struct {
	AccountID int64 `json:"account_id"`
	Amount    int64 `json:"amount"`
}

func (q *Queries) CreateEntries(ctx context.Context, arg CreateEntriesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEntries, arg.AccountID, arg.Amount)
}

const deleteEntries = `-- name: DeleteEntries :execresult
DELETE FROM entries
WHERE id = ?
`

func (q *Queries) DeleteEntries(ctx context.Context, id int64) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteEntries, id)
}

const getEntries = `-- name: GetEntries :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = ?
`

func (q *Queries) GetEntries(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntries, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, account_id, amount, created_at FROM entries
`

func (q *Queries) ListEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntries = `-- name: UpdateEntries :execresult
UPDATE entries
SET amount = ?
WHERE id = ?
`

type UpdateEntriesParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateEntries(ctx context.Context, arg UpdateEntriesParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateEntries, arg.Amount, arg.ID)
}
